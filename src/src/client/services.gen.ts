// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { AbpApiDefinitionGetData, AbpApiDefinitionGetError, AbpApiDefinitionGetResponse, AbpApplicationConfigurationGetData, AbpApplicationConfigurationGetError, AbpApplicationConfigurationGetResponse, AbpApplicationLocalizationGetData, AbpApplicationLocalizationGetError, AbpApplicationLocalizationGetResponse, AbpTenantFindTenantByNameData, AbpTenantFindTenantByNameError, AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByIdData, AbpTenantFindTenantByIdError, AbpTenantFindTenantByIdResponse, AccountRegisterData, AccountRegisterError, AccountRegisterResponse, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeError, AccountSendPasswordResetCodeResponse, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenError, AccountVerifyPasswordResetTokenResponse, AccountResetPasswordData, AccountResetPasswordError, AccountResetPasswordResponse, ClientGetListError, ClientGetListResponse, ClientCreateData, ClientCreateError, ClientCreateResponse, ClientGetData, ClientGetError, ClientGetResponse, ClientUpdateData, ClientUpdateError, ClientUpdateResponse, ClientDeleteData, ClientDeleteError, ClientDeleteResponse, ClientAddRedirectUriData, ClientAddRedirectUriError, ClientAddRedirectUriResponse, ClientAddPostLogoutRedirectUriData, ClientAddPostLogoutRedirectUriError, ClientAddPostLogoutRedirectUriResponse, ClientUpdateClientTypeData, ClientUpdateClientTypeError, ClientUpdateClientTypeResponse, DynamicClaimsRefreshError, DynamicClaimsRefreshResponse, EmailSettingsGetError, EmailSettingsGetResponse, EmailSettingsUpdateData, EmailSettingsUpdateError, EmailSettingsUpdateResponse, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailError, EmailSettingsSendTestEmailResponse, FeaturesGetData, FeaturesGetError, FeaturesGetResponse, FeaturesUpdateData, FeaturesUpdateError, FeaturesUpdateResponse, FeaturesDeleteData, FeaturesDeleteError, FeaturesDeleteResponse, LoginLoginData, LoginLoginError, LoginLoginResponse, LoginLogoutError, LoginLogoutResponse, LoginCheckPasswordData, LoginCheckPasswordError, LoginCheckPasswordResponse, PermissionsGetData, PermissionsGetError, PermissionsGetResponse, PermissionsUpdateData, PermissionsUpdateError, PermissionsUpdateResponse, ProfileGetError, ProfileGetResponse, ProfileUpdateData, ProfileUpdateError, ProfileUpdateResponse, ProfileChangePasswordData, ProfileChangePasswordError, ProfileChangePasswordResponse, RoleGetAllListError, RoleGetAllListResponse, RoleGetListData, RoleGetListError, RoleGetListResponse, RoleCreateData, RoleCreateError, RoleCreateResponse, RoleGetData, RoleGetError, RoleGetResponse, RoleUpdateData, RoleUpdateError, RoleUpdateResponse, RoleDeleteData, RoleDeleteError, RoleDeleteResponse, TenantGetTenantGuidData, TenantGetTenantGuidError, TenantGetTenantGuidResponse, TenantAddHostData, TenantAddHostError, TenantAddHostResponse, TenantGetTenantHostData, TenantGetTenantHostError, TenantGetTenantHostResponse, TenantGetData, TenantGetError, TenantGetResponse, TenantUpdateData, TenantUpdateError, TenantUpdateResponse, TenantDeleteData, TenantDeleteError, TenantDeleteResponse, TenantGetListData, TenantGetListError, TenantGetListResponse, TenantCreateData, TenantCreateError, TenantCreateResponse, TenantGetDefaultConnectionStringData, TenantGetDefaultConnectionStringError, TenantGetDefaultConnectionStringResponse, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringError, TenantUpdateDefaultConnectionStringResponse, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringError, TenantDeleteDefaultConnectionStringResponse, TimeZoneSettingsGetError, TimeZoneSettingsGetResponse, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateError, TimeZoneSettingsUpdateResponse, TimeZoneSettingsGetTimezonesError, TimeZoneSettingsGetTimezonesResponse, UserGetData, UserGetError, UserGetResponse, UserUpdateData, UserUpdateError, UserUpdateResponse, UserDeleteData, UserDeleteError, UserDeleteResponse, UserGetListData, UserGetListError, UserGetListResponse, UserCreateData, UserCreateError, UserCreateResponse, UserGetRolesData, UserGetRolesError, UserGetRolesResponse, UserUpdateRolesData, UserUpdateRolesError, UserUpdateRolesResponse, UserGetAssignableRolesError, UserGetAssignableRolesResponse, UserFindByUsernameData, UserFindByUsernameError, UserFindByUsernameResponse, UserFindByEmailData, UserFindByEmailError, UserFindByEmailResponse, UserLookupFindByIdData, UserLookupFindByIdError, UserLookupFindByIdResponse, UserLookupFindByUserNameData, UserLookupFindByUserNameError, UserLookupFindByUserNameResponse, UserLookupSearchData, UserLookupSearchError, UserLookupSearchResponse, UserLookupGetCountData, UserLookupGetCountError, UserLookupGetCountResponse, ValuesGetError, ValuesGetResponse, ValuesPostData, ValuesPostError, ValuesPostResponse, ValuesGet1Data, ValuesGet1Error, ValuesGet1Response, ValuesPutData, ValuesPutError, ValuesPutResponse, ValuesDeleteData, ValuesDeleteError, ValuesDeleteResponse } from './types.gen';

export const client = createClient(createConfig());

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApiDefinitionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, ThrowOnError>({
        ...options,
        url: '/api/abp/api-definition'
    });
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApplicationConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AbpApplicationConfigurationGetResponse, AbpApplicationConfigurationGetError, ThrowOnError>({
        ...options,
        url: '/api/abp/application-configuration'
    });
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(options: Options<AbpApplicationLocalizationGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AbpApplicationLocalizationGetResponse, AbpApplicationLocalizationGetError, ThrowOnError>({
        ...options,
        url: '/api/abp/application-localization'
    });
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByNameError, ThrowOnError>({
        ...options,
        url: '/api/abp/multi-tenancy/tenants/by-name/{name}'
    });
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, ThrowOnError>({
        ...options,
        url: '/api/abp/multi-tenancy/tenants/by-id/{id}'
    });
};

export const accountRegister = <ThrowOnError extends boolean = false>(options?: Options<AccountRegisterData, ThrowOnError>) => {
    return (options?.client ?? client).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
        ...options,
        url: '/api/account/register'
    });
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(options?: Options<AccountSendPasswordResetCodeData, ThrowOnError>) => {
    return (options?.client ?? client).post<AccountSendPasswordResetCodeResponse, AccountSendPasswordResetCodeError, ThrowOnError>({
        ...options,
        url: '/api/account/send-password-reset-code'
    });
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(options?: Options<AccountVerifyPasswordResetTokenData, ThrowOnError>) => {
    return (options?.client ?? client).post<AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, ThrowOnError>({
        ...options,
        url: '/api/account/verify-password-reset-token'
    });
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(options?: Options<AccountResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<AccountResetPasswordResponse, AccountResetPasswordError, ThrowOnError>({
        ...options,
        url: '/api/account/reset-password'
    });
};

export const clientGetList = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ClientGetListResponse, ClientGetListError, ThrowOnError>({
        ...options,
        url: '/api/client-management'
    });
};

export const clientCreate = <ThrowOnError extends boolean = false>(options?: Options<ClientCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<ClientCreateResponse, ClientCreateError, ThrowOnError>({
        ...options,
        url: '/api/client-management'
    });
};

export const clientGet = <ThrowOnError extends boolean = false>(options: Options<ClientGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ClientGetResponse, ClientGetError, ThrowOnError>({
        ...options,
        url: '/api/client-management/{id}'
    });
};

export const clientUpdate = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<ClientUpdateResponse, ClientUpdateError, ThrowOnError>({
        ...options,
        url: '/api/client-management/{id}'
    });
};

export const clientDelete = <ThrowOnError extends boolean = false>(options: Options<ClientDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ClientDeleteResponse, ClientDeleteError, ThrowOnError>({
        ...options,
        url: '/api/client-management/{id}'
    });
};

export const clientAddRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddRedirectUriData, ThrowOnError>) => {
    return (options?.client ?? client).post<ClientAddRedirectUriResponse, ClientAddRedirectUriError, ThrowOnError>({
        ...options,
        url: '/api/client-management/add-redirect-uri/{id}'
    });
};

export const clientAddPostLogoutRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddPostLogoutRedirectUriData, ThrowOnError>) => {
    return (options?.client ?? client).post<ClientAddPostLogoutRedirectUriResponse, ClientAddPostLogoutRedirectUriError, ThrowOnError>({
        ...options,
        url: '/api/client-management/add-post-logout-redirect-uri/{id}'
    });
};

export const clientUpdateClientType = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateClientTypeData, ThrowOnError>) => {
    return (options?.client ?? client).post<ClientUpdateClientTypeResponse, ClientUpdateClientTypeError, ThrowOnError>({
        ...options,
        url: '/api/client-management/update-client-type/{id}'
    });
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<DynamicClaimsRefreshResponse, DynamicClaimsRefreshError, ThrowOnError>({
        ...options,
        url: '/api/account/dynamic-claims/refresh'
    });
};

export const emailSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<EmailSettingsGetResponse, EmailSettingsGetError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/emailing'
    });
};

export const emailSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<EmailSettingsUpdateResponse, EmailSettingsUpdateError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/emailing'
    });
};

export const emailSettingsSendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsSendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? client).post<EmailSettingsSendTestEmailResponse, EmailSettingsSendTestEmailError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/emailing/send-test-email'
    });
};

export const featuresGet = <ThrowOnError extends boolean = false>(options?: Options<FeaturesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<FeaturesGetResponse, FeaturesGetError, ThrowOnError>({
        ...options,
        url: '/api/feature-management/features'
    });
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(options?: Options<FeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<FeaturesUpdateResponse, FeaturesUpdateError, ThrowOnError>({
        ...options,
        url: '/api/feature-management/features'
    });
};

export const featuresDelete = <ThrowOnError extends boolean = false>(options?: Options<FeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<FeaturesDeleteResponse, FeaturesDeleteError, ThrowOnError>({
        ...options,
        url: '/api/feature-management/features'
    });
};

export const loginLogin = <ThrowOnError extends boolean = false>(options?: Options<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginLoginResponse, LoginLoginError, ThrowOnError>({
        ...options,
        url: '/api/account/login'
    });
};

export const loginLogout = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<LoginLogoutResponse, LoginLogoutError, ThrowOnError>({
        ...options,
        url: '/api/account/logout'
    });
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(options?: Options<LoginCheckPasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<LoginCheckPasswordResponse, LoginCheckPasswordError, ThrowOnError>({
        ...options,
        url: '/api/account/check-password'
    });
};

export const permissionsGet = <ThrowOnError extends boolean = false>(options?: Options<PermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<PermissionsGetResponse, PermissionsGetError, ThrowOnError>({
        ...options,
        url: '/api/permission-management/permissions'
    });
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<PermissionsUpdateResponse, PermissionsUpdateError, ThrowOnError>({
        ...options,
        url: '/api/permission-management/permissions'
    });
};

export const profileGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ProfileGetResponse, ProfileGetError, ThrowOnError>({
        ...options,
        url: '/api/account/my-profile'
    });
};

export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<ProfileUpdateResponse, ProfileUpdateError, ThrowOnError>({
        ...options,
        url: '/api/account/my-profile'
    });
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(options?: Options<ProfileChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? client).post<ProfileChangePasswordResponse, ProfileChangePasswordError, ThrowOnError>({
        ...options,
        url: '/api/account/my-profile/change-password'
    });
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleGetAllListResponse, RoleGetAllListError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles/all'
    });
};

export const roleGetList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetListData, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleGetListResponse, RoleGetListError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles'
    });
};

export const roleCreate = <ThrowOnError extends boolean = false>(options?: Options<RoleCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<RoleCreateResponse, RoleCreateError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles'
    });
};

export const roleGet = <ThrowOnError extends boolean = false>(options: Options<RoleGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RoleGetResponse, RoleGetError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles/{id}'
    });
};

export const roleUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<RoleUpdateResponse, RoleUpdateError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles/{id}'
    });
};

export const roleDelete = <ThrowOnError extends boolean = false>(options: Options<RoleDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RoleDeleteResponse, RoleDeleteError, ThrowOnError>({
        ...options,
        url: '/api/identity/roles/{id}'
    });
};

export const tenantGetTenantGuid = <ThrowOnError extends boolean = false>(options?: Options<TenantGetTenantGuidData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantGetTenantGuidResponse, TenantGetTenantGuidError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy'
    });
};

export const tenantAddHost = <ThrowOnError extends boolean = false>(options?: Options<TenantAddHostData, ThrowOnError>) => {
    return (options?.client ?? client).post<TenantAddHostResponse, TenantAddHostError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy'
    });
};

export const tenantGetTenantHost = <ThrowOnError extends boolean = false>(options: Options<TenantGetTenantHostData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantGetTenantHostResponse, TenantGetTenantHostError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/{id}'
    });
};

export const tenantGet = <ThrowOnError extends boolean = false>(options: Options<TenantGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantGetResponse, TenantGetError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}'
    });
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<TenantUpdateResponse, TenantUpdateError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}'
    });
};

export const tenantDelete = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TenantDeleteResponse, TenantDeleteError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}'
    });
};

export const tenantGetList = <ThrowOnError extends boolean = false>(options?: Options<TenantGetListData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantGetListResponse, TenantGetListError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants'
    });
};

export const tenantCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<TenantCreateResponse, TenantCreateError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants'
    });
};

export const tenantGetDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantGetDefaultConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).get<TenantGetDefaultConnectionStringResponse, TenantGetDefaultConnectionStringError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string'
    });
};

export const tenantUpdateDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateDefaultConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).put<TenantUpdateDefaultConnectionStringResponse, TenantUpdateDefaultConnectionStringError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string'
    });
};

export const tenantDeleteDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteDefaultConnectionStringData, ThrowOnError>) => {
    return (options?.client ?? client).delete<TenantDeleteDefaultConnectionStringResponse, TenantDeleteDefaultConnectionStringError, ThrowOnError>({
        ...options,
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string'
    });
};

export const timeZoneSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TimeZoneSettingsGetResponse, TimeZoneSettingsGetError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/timezone'
    });
};

export const timeZoneSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).post<TimeZoneSettingsUpdateResponse, TimeZoneSettingsUpdateError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/timezone'
    });
};

export const timeZoneSettingsGetTimezones = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<TimeZoneSettingsGetTimezonesResponse, TimeZoneSettingsGetTimezonesError, ThrowOnError>({
        ...options,
        url: '/api/setting-management/timezone/timezones'
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetResponse, UserGetError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/{id}'
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<UserUpdateResponse, UserUpdateError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/{id}'
    });
};

export const userDelete = <ThrowOnError extends boolean = false>(options: Options<UserDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<UserDeleteResponse, UserDeleteError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/{id}'
    });
};

export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetListResponse, UserGetListError, ThrowOnError>({
        ...options,
        url: '/api/identity/users'
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? client).post<UserCreateResponse, UserCreateError, ThrowOnError>({
        ...options,
        url: '/api/identity/users'
    });
};

export const userGetRoles = <ThrowOnError extends boolean = false>(options: Options<UserGetRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetRolesResponse, UserGetRolesError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/{id}/roles'
    });
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(options: Options<UserUpdateRolesData, ThrowOnError>) => {
    return (options?.client ?? client).put<UserUpdateRolesResponse, UserUpdateRolesError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/{id}/roles'
    });
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<UserGetAssignableRolesResponse, UserGetAssignableRolesError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/assignable-roles'
    });
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(options: Options<UserFindByUsernameData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserFindByUsernameResponse, UserFindByUsernameError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/by-username/{userName}'
    });
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(options: Options<UserFindByEmailData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserFindByEmailResponse, UserFindByEmailError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/by-email/{email}'
    });
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserLookupFindByIdResponse, UserLookupFindByIdError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/lookup/{id}'
    });
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByUserNameData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/lookup/by-username/{userName}'
    });
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(options?: Options<UserLookupSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserLookupSearchResponse, UserLookupSearchError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/lookup/search'
    });
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(options?: Options<UserLookupGetCountData, ThrowOnError>) => {
    return (options?.client ?? client).get<UserLookupGetCountResponse, UserLookupGetCountError, ThrowOnError>({
        ...options,
        url: '/api/identity/users/lookup/count'
    });
};

export const valuesGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<ValuesGetResponse, ValuesGetError, ThrowOnError>({
        ...options,
        url: '/api/Values'
    });
};

export const valuesPost = <ThrowOnError extends boolean = false>(options?: Options<ValuesPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ValuesPostResponse, ValuesPostError, ThrowOnError>({
        ...options,
        url: '/api/Values'
    });
};

export const valuesGet1 = <ThrowOnError extends boolean = false>(options: Options<ValuesGet1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<ValuesGet1Response, ValuesGet1Error, ThrowOnError>({
        ...options,
        url: '/api/Values/{id}'
    });
};

export const valuesPut = <ThrowOnError extends boolean = false>(options: Options<ValuesPutData, ThrowOnError>) => {
    return (options?.client ?? client).put<ValuesPutResponse, ValuesPutError, ThrowOnError>({
        ...options,
        url: '/api/Values/{id}'
    });
};

export const valuesDelete = <ThrowOnError extends boolean = false>(options: Options<ValuesDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<ValuesDeleteResponse, ValuesDeleteError, ThrowOnError>({
        ...options,
        url: '/api/Values/{id}'
    });
};